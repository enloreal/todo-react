{"ast":null,"code":"import _objectSpread from \"/home/academy9/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/MobX/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { makeAutoObservable } from \"mobx\";\nimport { fetchTasks, handleAddTask, updateTask, handleDeleteTask } from \"../api\";\nconst saveTasksToLocalStorage = tasks => {\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n};\nconst getTasksFromLocalStorage = () => {\n  const savedTasks = localStorage.getItem(\"tasks\");\n  try {\n    return savedTasks ? JSON.parse(savedTasks) : [];\n  } catch (error) {\n    console.error(\"Error parsing saved tasks:\", error);\n    return [];\n  }\n};\nclass TodoStore {\n  // Добавлено состояние загрузки\n\n  constructor() {\n    this.tasks = [];\n    this.newTaskText = \"\";\n    this.editingTask = null;\n    this.message = \"\";\n    this.isLoading = false;\n    makeAutoObservable(this);\n  }\n  async fetchInitialTasks() {\n    this.isLoading = true; // Начало загрузки\n    this.message = \"\"; // Очищаем сообщение об ошибке\n\n    try {\n      const fetchedTasks = await fetchTasks();\n      this.tasks = fetchedTasks;\n      this.message = \"❗Tasks loaded from server❗\";\n      saveTasksToLocalStorage(this.tasks); // Сохраняем в localStorage после успешной загрузки\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      this.tasks = getTasksFromLocalStorage(); // Загружаем из localStorage в случае ошибки\n      this.message = \"❗Error loading tasks. Tasks loaded from local storage or check your server❗\"; // Более информативное сообщение\n    } finally {\n      this.isLoading = false; // Конец загрузки\n    }\n  }\n  async addTask() {\n    if (!this.newTaskText.trim()) return;\n    try {\n      const newTask = await handleAddTask(this.newTaskText);\n      this.tasks.push(newTask);\n      this.newTaskText = \"\";\n      saveTasksToLocalStorage(this.tasks);\n    } catch (error) {\n      console.error('Error adding task:', error);\n      this.message = \"❗Failed to add task. Please try again later.❗\";\n    }\n  }\n  async deleteTask(id) {\n    try {\n      await handleDeleteTask(id);\n      this.tasks = this.tasks.filter(task => task.id !== id);\n      saveTasksToLocalStorage(this.tasks);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      this.message = \"❗Failed to delete task. Please try again later.❗\";\n    }\n  }\n  async toggleTask(id) {\n    const task = this.tasks.find(t => t.id === id);\n    if (task) {\n      try {\n        const updatedTask = _objectSpread(_objectSpread({}, task), {}, {\n          completed: !task.completed\n        });\n        await updateTask(updatedTask); // Обновляем задачу на сервере\n        const taskIndex = this.tasks.findIndex(t => t.id === id);\n        if (taskIndex !== -1) {\n          this.tasks[taskIndex] = updatedTask;\n          saveTasksToLocalStorage(this.tasks);\n        }\n      } catch (error) {\n        console.error(\"Error toggling task:\", error);\n        this.message = \"❗Failed to update task. Please try again later.❗\";\n      }\n    }\n  }\n  markAllCompleted() {\n    // В этом случае обновление на сервере происходит для каждой задачи отдельно.\n    //  Можно оптимизировать, отправив один запрос на сервер для обновления всех задач сразу.\n    this.tasks.forEach(async task => {\n      if (!task.completed) {\n        try {\n          await updateTask(_objectSpread(_objectSpread({}, task), {}, {\n            completed: true\n          }));\n          task.completed = true;\n          saveTasksToLocalStorage(this.tasks);\n        } catch (error) {\n          console.error(\"Error marking all tasks completed:\", error);\n          this.message = \"❗Failed to mark all tasks completed. Please try again later.❗\";\n        }\n      }\n    });\n  }\n  deleteCompleted() {\n    // Здесь также можно оптимизировать, отправив один запрос на сервер для удаления всех выполненных задач.\n    const completedTasks = this.tasks.filter(task => task.completed);\n    completedTasks.forEach(async completedTask => {\n      try {\n        await handleDeleteTask(completedTask.id);\n        this.tasks = this.tasks.filter(task => !task.completed);\n        saveTasksToLocalStorage(this.tasks);\n      } catch (error) {\n        console.error(\"Error deleting completed tasks:\", error);\n        this.message = \"❗Failed to delete completed tasks. Please try again later.❗\";\n      }\n    });\n  }\n  startEditingTask(task) {\n    this.editingTask = _objectSpread({}, task); // Создаем копию для редактирования\n  }\n  cancelEditingTask() {\n    this.editingTask = null;\n  }\n  async updateTask(updatedTask) {\n    try {\n      await updateTask(updatedTask);\n      const taskIndex = this.tasks.findIndex(task => task.id === updatedTask.id);\n      if (taskIndex !== -1) {\n        this.tasks[taskIndex] = updatedTask;\n        saveTasksToLocalStorage(this.tasks);\n        this.editingTask = null;\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      this.message = \"❗Failed to update task. Please try again later.❗\";\n    }\n  }\n  setNewTaskText(text) {\n    this.newTaskText = text;\n  }\n}\nexport default new TodoStore();","map":{"version":3,"names":["makeAutoObservable","fetchTasks","handleAddTask","updateTask","handleDeleteTask","saveTasksToLocalStorage","tasks","localStorage","setItem","JSON","stringify","getTasksFromLocalStorage","savedTasks","getItem","parse","error","console","TodoStore","constructor","newTaskText","editingTask","message","isLoading","fetchInitialTasks","fetchedTasks","addTask","trim","newTask","push","deleteTask","id","filter","task","toggleTask","find","t","updatedTask","_objectSpread","completed","taskIndex","findIndex","markAllCompleted","forEach","deleteCompleted","completedTasks","completedTask","startEditingTask","cancelEditingTask","setNewTaskText","text"],"sources":["/home/academy9/Документы/MobX/src/store/todoStore.ts"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { TaskItem } from \"../types\";\nimport { fetchTasks, handleAddTask, updateTask, handleDeleteTask } from \"../api\";\n\n\nconst saveTasksToLocalStorage = (tasks: TaskItem[]): void => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n};\n\nconst getTasksFromLocalStorage = (): TaskItem[] => {\n    const savedTasks = localStorage.getItem(\"tasks\");\n    try {\n        return savedTasks ? JSON.parse(savedTasks) : [];\n    } catch (error) {\n        console.error(\"Error parsing saved tasks:\", error);\n        return [];\n    }\n};\n\n\nclass TodoStore {\n    tasks: TaskItem[] = [];\n    newTaskText: string = \"\";\n    editingTask: TaskItem | null = null;\n    message: string = \"\";\n    isLoading: boolean = false; // Добавлено состояние загрузки\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    async fetchInitialTasks() {\n        this.isLoading = true; // Начало загрузки\n        this.message = \"\"; // Очищаем сообщение об ошибке\n\n        try {\n            const fetchedTasks = await fetchTasks();\n            this.tasks = fetchedTasks;\n            this.message = \"❗Tasks loaded from server❗\";\n            saveTasksToLocalStorage(this.tasks); // Сохраняем в localStorage после успешной загрузки\n        } catch (error: any) {\n            console.error(\"Error fetching tasks:\", error);\n            this.tasks = getTasksFromLocalStorage(); // Загружаем из localStorage в случае ошибки\n            this.message = \"❗Error loading tasks. Tasks loaded from local storage or check your server❗\"; // Более информативное сообщение\n        } finally {\n            this.isLoading = false; // Конец загрузки\n        }\n    }\n\n\n    async addTask() {\n        if (!this.newTaskText.trim()) return;\n        try {\n            const newTask = await handleAddTask(this.newTaskText);\n            this.tasks.push(newTask);\n            this.newTaskText = \"\";\n            saveTasksToLocalStorage(this.tasks);\n        } catch (error) {\n            console.error('Error adding task:', error);\n            this.message = \"❗Failed to add task. Please try again later.❗\";\n        }\n    }\n\n\n    async deleteTask(id: number) {\n      try {\n          await handleDeleteTask(id);\n          this.tasks = this.tasks.filter((task) => task.id !== id);\n          saveTasksToLocalStorage(this.tasks);\n      } catch (error) {\n          console.error('Error deleting task:', error);\n          this.message = \"❗Failed to delete task. Please try again later.❗\";\n      }\n    }\n\n    async toggleTask(id: number) {\n        const task = this.tasks.find((t) => t.id === id);\n        if (task) {\n            try {\n                const updatedTask = { ...task, completed: !task.completed };\n                await updateTask(updatedTask); // Обновляем задачу на сервере\n                const taskIndex = this.tasks.findIndex((t) => t.id === id);\n                if (taskIndex !== -1) {\n                  this.tasks[taskIndex] = updatedTask;\n                  saveTasksToLocalStorage(this.tasks);\n                }\n            } catch (error) {\n                console.error(\"Error toggling task:\", error);\n                this.message = \"❗Failed to update task. Please try again later.❗\";\n            }\n        }\n    }\n\n\n    markAllCompleted() {\n        // В этом случае обновление на сервере происходит для каждой задачи отдельно.\n        //  Можно оптимизировать, отправив один запрос на сервер для обновления всех задач сразу.\n        this.tasks.forEach(async (task) => {\n          if (!task.completed) {\n            try {\n                await updateTask({...task, completed: true})\n                task.completed = true;\n                saveTasksToLocalStorage(this.tasks);\n            } catch (error) {\n                console.error(\"Error marking all tasks completed:\", error);\n                this.message = \"❗Failed to mark all tasks completed. Please try again later.❗\";\n            }\n          }\n        })\n    }\n\n    deleteCompleted() {\n        // Здесь также можно оптимизировать, отправив один запрос на сервер для удаления всех выполненных задач.\n        const completedTasks = this.tasks.filter(task => task.completed)\n        completedTasks.forEach(async (completedTask) => {\n            try {\n                await handleDeleteTask(completedTask.id)\n                this.tasks = this.tasks.filter((task) => !task.completed);\n                saveTasksToLocalStorage(this.tasks);\n            } catch (error) {\n                console.error(\"Error deleting completed tasks:\", error);\n                this.message = \"❗Failed to delete completed tasks. Please try again later.❗\";\n            }\n        })\n    }\n\n\n    startEditingTask(task: TaskItem) {\n        this.editingTask = { ...task }; // Создаем копию для редактирования\n    }\n\n    cancelEditingTask() {\n        this.editingTask = null;\n    }\n\n    async updateTask(updatedTask: TaskItem) {\n        try {\n            await updateTask(updatedTask);\n            const taskIndex = this.tasks.findIndex((task) => task.id === updatedTask.id);\n            if (taskIndex !== -1) {\n                this.tasks[taskIndex] = updatedTask;\n                saveTasksToLocalStorage(this.tasks);\n                this.editingTask = null;\n            }\n        } catch (error) {\n            console.error(\"Error updating task:\", error);\n            this.message = \"❗Failed to update task. Please try again later.❗\";\n        }\n    }\n\n    setNewTaskText(text: string) {\n        this.newTaskText = text;\n    }\n}\n\n\nexport default new TodoStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}