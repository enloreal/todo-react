{"ast":null,"code":"import _objectSpread from \"/home/academy9/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/MobX/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { makeAutoObservable } from \"mobx\";\nimport { handleDeleteTask, updateTask, handleAddTask, fetchTasks as apiFetchTasks } from \"../api\";\nclass TodoStore {\n  constructor() {\n    this.tasks = [];\n    this.newTaskText = \"\";\n    this.editingTask = null;\n    this.message = \"\";\n    makeAutoObservable(this);\n  }\n  async fetchInitialTasks() {\n    try {\n      const fetchedTasks = await apiFetchTasks();\n      this.tasks = fetchedTasks;\n      this.message = \"❗Tasks loaded from server❗\";\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      this.message = \"❗Error loading tasks❗\";\n    }\n  }\n  addTask() {\n    if (!this.newTaskText.trim()) return;\n    handleAddTask(this.newTaskText).then(newTask => {\n      this.tasks.push(newTask);\n      this.newTaskText = \"\";\n    });\n  }\n  deleteTask(id) {\n    handleDeleteTask(id).then(() => {\n      this.tasks = this.tasks.filter(task => task.id !== id);\n    });\n  }\n  toggleTask(id) {\n    const taskIndex = this.tasks.findIndex(task => task.id === id);\n    if (taskIndex !== -1) {\n      this.tasks[taskIndex].completed = !this.tasks[taskIndex].completed;\n    }\n  }\n  markAllCompleted() {\n    this.tasks = this.tasks.map(task => _objectSpread(_objectSpread({}, task), {}, {\n      completed: true\n    }));\n  }\n  deleteCompleted() {\n    this.tasks = this.tasks.filter(task => !task.completed);\n  }\n  startEditingTask(task) {\n    this.editingTask = task;\n  }\n  cancelEditingTask() {\n    this.editingTask = null;\n  }\n  updateTaskInStore(updatedTask) {\n    if (updatedTask.text.trim() === \"\") return;\n    const taskIndex = this.tasks.findIndex(task => task.documentId === updatedTask.documentId);\n    if (taskIndex !== -1) {\n      updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n        this.tasks[taskIndex] = updatedTask;\n      });\n    }\n    this.editingTask = null;\n  }\n  setNewTaskText(text) {\n    this.newTaskText = text;\n  }\n}\nexport default new TodoStore();","map":{"version":3,"names":["makeAutoObservable","handleDeleteTask","updateTask","handleAddTask","fetchTasks","apiFetchTasks","TodoStore","constructor","tasks","newTaskText","editingTask","message","fetchInitialTasks","fetchedTasks","error","console","addTask","trim","then","newTask","push","deleteTask","id","filter","task","toggleTask","taskIndex","findIndex","completed","markAllCompleted","map","_objectSpread","deleteCompleted","startEditingTask","cancelEditingTask","updateTaskInStore","updatedTask","text","documentId","setNewTaskText"],"sources":["/home/academy9/Документы/MobX/src/store/todoStore.ts"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { TaskItem } from \"../types\";\nimport { handleDeleteTask, updateTask, handleAddTask, fetchTasks as apiFetchTasks } from \"../api\";\n\nclass TodoStore {\n    tasks: TaskItem[] = [];\n    newTaskText: string = \"\";\n    editingTask: TaskItem | null = null;\n    message: string = \"\";\n    \n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    async fetchInitialTasks() {\n        try {\n            const fetchedTasks = await apiFetchTasks();\n            this.tasks = fetchedTasks;\n            this.message = \"❗Tasks loaded from server❗\";\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n            this.message = \"❗Error loading tasks❗\";\n        }\n    }\n\n    addTask() {\n        if (!this.newTaskText.trim()) return;\n\n        handleAddTask(this.newTaskText).then((newTask) => {\n            this.tasks.push(newTask);\n            this.newTaskText = \"\";\n        });\n    }\n\n    deleteTask(id: number) {\n        handleDeleteTask(id).then(() => {\n          this.tasks = this.tasks.filter((task) => task.id !== id);\n        });\n      }\n\n    toggleTask(id: number) {\n        const taskIndex = this.tasks.findIndex((task) => task.id === id);\n        if (taskIndex !== -1) {\n            this.tasks[taskIndex].completed = !this.tasks[taskIndex].completed;\n        }\n    }\n\n    markAllCompleted() {\n        this.tasks = this.tasks.map((task) => ({ ...task, completed: true }));\n    }\n\n    deleteCompleted() {\n        this.tasks = this.tasks.filter((task) => !task.completed);\n    }\n\n    startEditingTask(task: TaskItem) {\n        this.editingTask = task;\n    }\n\n    cancelEditingTask() {\n        this.editingTask = null;\n    }\n\n    updateTaskInStore(updatedTask: TaskItem) {\n        if (updatedTask.text.trim() === \"\") return;\n      \n        const taskIndex = this.tasks.findIndex((task) => task.documentId === updatedTask.documentId);\n        if (taskIndex !== -1) {\n            updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n                this.tasks[taskIndex] = updatedTask;\n            });\n        }\n      \n        this.editingTask = null;\n    }\n      \n    setNewTaskText(text: string) {\n        this.newTaskText = text;\n    }\n}\n\nexport default new TodoStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}