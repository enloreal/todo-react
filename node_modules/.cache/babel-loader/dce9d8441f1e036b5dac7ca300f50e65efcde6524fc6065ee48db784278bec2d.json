{"ast":null,"code":"const API_URL = \"http://localhost:1337/api/tasks\";\nexport async function fetchTasks() {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map(item => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed\n    }));\n  } catch (error) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\nexport async function handleAddTask(taskText) {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        data: {\n          text: taskText,\n          completed: false\n        }\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.status));\n    }\n    const newTaskData = await response.json();\n    return {\n      id: newTaskData.data.id,\n      text: newTaskData.data.attributes.text,\n      completed: newTaskData.data.attributes.completed\n    };\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\nexport async function updateTask(updatedTask) {\n  try {\n    const response = await fetch(\"\".concat(API_URL, \"/\").concat(updatedTask.id), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        data: {\n          text: updatedTask.text,\n          completed: updatedTask.completed\n        }\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.status));\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}\nexport async function handleDeleteTask(id) {\n  try {\n    const response = await fetch(\"\".concat(API_URL, \"/\").concat(id), {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.status));\n    }\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","data","json","map","item","id","text","completed","error","console","Error","handleAddTask","taskText","method","headers","body","JSON","stringify","ok","concat","status","newTaskData","attributes","updateTask","updatedTask","handleDeleteTask"],"sources":["/home/academy9/Документы/MobX/src/api.ts"],"sourcesContent":["import { TaskItem } from \"./types\";\n\nconst API_URL = \"http://localhost:1337/api/tasks\";\n\nexport async function fetchTasks(): Promise<TaskItem[]> {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map((item: any) => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed,\n    }));\n  } catch (error: any) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\n\nexport async function handleAddTask(taskText: string): Promise<TaskItem> {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ data: { text: taskText, completed: false } }),\n    });\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n    const newTaskData = await response.json();\n    return {\n      id: newTaskData.data.id,\n      text: newTaskData.data.attributes.text,\n      completed: newTaskData.data.attributes.completed,\n    };\n  } catch (error: any) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\n\nexport async function updateTask(updatedTask: TaskItem): Promise<void> {\n  try {\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ data: { text: updatedTask.text, completed: updatedTask.completed } }),\n    });\n     if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}\n\nexport async function handleDeleteTask(id: number): Promise<void> {\n  try {\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\",\n    });\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n  } catch (error: any) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}