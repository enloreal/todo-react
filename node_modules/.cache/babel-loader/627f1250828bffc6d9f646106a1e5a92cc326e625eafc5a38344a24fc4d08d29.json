{"ast":null,"code":"import _objectSpread from \"/home/academy9/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/MobX/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { makeAutoObservable } from \"mobx\";\nimport { fetchTasks as apiFetchTasks } from \"../api\";\nconst saveTasksToLocalStorage = tasks => {\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n};\nconst getTasksFromLocalStorage = () => {\n  const savedTasks = localStorage.getItem(\"tasks\");\n  try {\n    return savedTasks ? JSON.parse(savedTasks) : [];\n  } catch (error) {\n    console.error(\"Error parsing saved tasks:\", error);\n    return [];\n  }\n};\nclass TodoStore {\n  constructor() {\n    this.tasks = [];\n    this.newTaskText = \"\";\n    this.editingTask = null;\n    this.message = \"\";\n    makeAutoObservable(this);\n  }\n  async fetchInitialTasks() {\n    try {\n      const fetchedTasks = await apiFetchTasks();\n      const savedTasks = localStorage.getItem(\"tasks\");\n      let updatedTasks = [];\n      if (savedTasks) {\n        try {\n          const parsedSavedTasks = JSON.parse(savedTasks);\n          const allTasks = [...parsedSavedTasks, ...fetchedTasks];\n          const uniqueIds = new Set();\n          updatedTasks = allTasks.filter(task => {\n            if (!uniqueIds.has(task.id)) {\n              uniqueIds.add(task.id);\n              return true;\n            }\n            return false;\n          });\n          this.message = \"❗Tasks loaded from server❗\";\n        } catch (error) {\n          console.error(\"Error parsing saved tasks:\", error);\n          updatedTasks = fetchedTasks;\n          this.message = \"❗Error parsing saved tasks. Tasks loaded from server❗\";\n        }\n      } else {\n        updatedTasks = fetchedTasks;\n        this.message = \"❗Tasks loaded from server❗\";\n      }\n      saveTasksToLocalStorage(updatedTasks);\n      this.tasks = updatedTasks;\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      this.tasks = getTasksFromLocalStorage();\n      this.message = \"❗Error loading tasks. Tasks loaded from local storage❗\";\n    }\n    ;\n  }\n  addTask() {\n    if (!this.newTaskText.trim()) return;\n    handleAddTask(this.newTaskText).then(newTask => {\n      this.tasks.push(newTask);\n      saveTasksToLocalStorage(this.tasks);\n      this.newTaskText = \"\";\n    });\n  }\n  deleteTask(id) {\n    this.tasks = this.tasks.filter(task => task.id !== id);\n    saveTasksToLocalStorage(this.tasks);\n  }\n  toggleTask(id) {\n    const taskIndex = this.tasks.findIndex(task => task.id === id);\n    if (taskIndex !== -1) {\n      this.tasks[taskIndex].completed = !this.tasks[taskIndex].completed;\n      saveTasksToLocalStorage(this.tasks);\n    }\n  }\n  markAllCompleted() {\n    this.tasks = this.tasks.map(task => _objectSpread(_objectSpread({}, task), {}, {\n      completed: true\n    }));\n    saveTasksToLocalStorage(this.tasks);\n  }\n  deleteCompleted() {\n    this.tasks = this.tasks.filter(task => !task.completed);\n    saveTasksToLocalStorage(this.tasks);\n  }\n  startEditingTask(task) {\n    this.editingTask = task;\n  }\n  cancelEditingTask() {\n    this.editingTask = null;\n  }\n  updateTask(updatedTask) {\n    if (updatedTask.text.trim() === \"\") return;\n    const taskIndex = this.tasks.findIndex(task => task.id === updatedTask.id);\n    if (taskIndex !== -1) {\n      this.tasks[taskIndex] = updatedTask;\n      saveTasksToLocalStorage(this.tasks);\n    }\n    this.editingTask = null;\n  }\n  setNewTaskText(text) {\n    this.newTaskText = text;\n  }\n}\nexport default new TodoStore();","map":{"version":3,"names":["makeAutoObservable","fetchTasks","apiFetchTasks","saveTasksToLocalStorage","tasks","localStorage","setItem","JSON","stringify","getTasksFromLocalStorage","savedTasks","getItem","parse","error","console","TodoStore","constructor","newTaskText","editingTask","message","fetchInitialTasks","fetchedTasks","updatedTasks","parsedSavedTasks","allTasks","uniqueIds","Set","filter","task","has","id","add","addTask","trim","handleAddTask","then","newTask","push","deleteTask","toggleTask","taskIndex","findIndex","completed","markAllCompleted","map","_objectSpread","deleteCompleted","startEditingTask","cancelEditingTask","updateTask","updatedTask","text","setNewTaskText"],"sources":["/home/academy9/Документы/MobX/src/store/todoStore.ts"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { TaskItem } from \"../types\";\nimport { fetchTasks as apiFetchTasks } from \"../api\";\n\nconst saveTasksToLocalStorage = (tasks: TaskItem[]): void => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n};\n\nconst getTasksFromLocalStorage = (): TaskItem[] => {\n    const savedTasks = localStorage.getItem(\"tasks\");\n    try {\n        return savedTasks ? JSON.parse(savedTasks) : [];\n    } catch (error) {\n        console.error(\"Error parsing saved tasks:\", error);\n        return [];\n    }\n};\n\n\nclass TodoStore {\n    tasks: TaskItem[] = [];\n    newTaskText: string = \"\";\n    editingTask: TaskItem | null = null;\n    message: string = \"\";\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n\n    async fetchInitialTasks() {\n        try {\n            const fetchedTasks = await apiFetchTasks();\n            const savedTasks = localStorage.getItem(\"tasks\");\n            let updatedTasks: TaskItem[] = [];\n\n            if (savedTasks) {\n                try {\n                    const parsedSavedTasks = JSON.parse(savedTasks);\n                    const allTasks = [...parsedSavedTasks, ...fetchedTasks];\n                    const uniqueIds = new Set<number>();\n                    updatedTasks = allTasks.filter((task) => {\n                        if (!uniqueIds.has(task.id)) {\n                            uniqueIds.add(task.id);\n                            return true;\n                        }\n                        return false;\n                    });\n                    this.message = \"❗Tasks loaded from server❗\";\n                } catch (error) {\n                    console.error(\"Error parsing saved tasks:\", error);\n                    updatedTasks = fetchedTasks;\n                    this.message = \"❗Error parsing saved tasks. Tasks loaded from server❗\";\n                }\n            } else {\n                updatedTasks = fetchedTasks;\n                this.message = \"❗Tasks loaded from server❗\";\n            }\n\n            saveTasksToLocalStorage(updatedTasks);\n            this.tasks = updatedTasks;\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n            this.tasks = getTasksFromLocalStorage();\n            this.message = \"❗Error loading tasks. Tasks loaded from local storage❗\";\n        };\n    }\n    \n\n\n    addTask() {\n        if (!this.newTaskText.trim()) return;\n      \n        handleAddTask(this.newTaskText).then((newTask) => {\n          this.tasks.push(newTask);\n          saveTasksToLocalStorage(this.tasks);\n          this.newTaskText = \"\";\n        });\n      }\n\n    deleteTask(id: number) {\n        this.tasks = this.tasks.filter((task) => task.id !== id);\n        saveTasksToLocalStorage(this.tasks);\n    }\n\n    toggleTask(id: number) {\n        const taskIndex = this.tasks.findIndex((task) => task.id === id);\n        if (taskIndex !== -1) {\n            this.tasks[taskIndex].completed = !this.tasks[taskIndex].completed;\n            saveTasksToLocalStorage(this.tasks);\n        }\n    }\n\n\n    markAllCompleted() {\n        this.tasks = this.tasks.map((task) => ({ ...task, completed: true }));\n        saveTasksToLocalStorage(this.tasks);\n    }\n\n    deleteCompleted() {\n        this.tasks = this.tasks.filter((task) => !task.completed);\n        saveTasksToLocalStorage(this.tasks);\n    }\n\n    startEditingTask(task: TaskItem) {\n        this.editingTask = task;\n    }\n\n    cancelEditingTask() {\n        this.editingTask = null;\n    }\n\n    updateTask(updatedTask: TaskItem) {\n        if (updatedTask.text.trim() === \"\") return;\n\n        const taskIndex = this.tasks.findIndex((task) => task.id === updatedTask.id);\n        if (taskIndex !== -1) {\n            this.tasks[taskIndex] = updatedTask;\n            saveTasksToLocalStorage(this.tasks);\n        }\n\n        this.editingTask = null;\n    }\n\n    setNewTaskText(text: string) {\n        this.newTaskText = text;\n    }\n\n\n}\n\n\nexport default new TodoStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}