{"ast":null,"code":"const API_URL = \"http://localhost:1337/api/tasks\";\nconst headers = {\n  'Content-Type': 'application/json'\n  // 'Authorization': 'Bearer YOUR_TOKEN' // если нужна авторизация\n};\nexport async function fetchTasks() {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map(item => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed\n    }));\n  } catch (error) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\nexport async function handleAddTask(taskText) {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        data: {\n          text: taskText,\n          completed: false\n        }\n      }) // Важно: данные оборачиваются в объект 'data'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(\"Failed to add task: \".concat(errorData.error.message)); // Более информативное сообщение об ошибке\n    }\n    const newTaskData = await response.json();\n    const newTask = {\n      id: newTaskData.data.id,\n      // Получаем ID из ответа Strapi\n      text: newTaskData.data.attributes.text,\n      // and attributes from Strapi v4/v5\n      completed: newTaskData.data.attributes.completed // and attributes from Strapi v4/v5\n    };\n    return newTask;\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\"); // Можно добавить более специфичную обработку ошибок\n  }\n}\nexport async function handleDeleteTask(id) {\n  try {\n    const deleteResponse = await fetch(\"\".concat(API_URL, \"/\").concat(id), {\n      method: \"DELETE\",\n      headers\n    });\n    if (!deleteResponse.ok) {\n      throw new Error(\"HTTP error! status: \".concat(deleteResponse.status));\n    }\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\nexport async function updateTask(id, completed, text) {\n  try {\n    const updateResponse = await fetch(\"\".concat(API_URL, \"/\").concat(id), {\n      method: \"PUT\",\n      headers,\n      body: JSON.stringify({\n        data: {\n          text,\n          completed\n        }\n      })\n    });\n    if (!updateResponse.ok) {\n      throw new Error(\"HTTP error! status: \".concat(updateResponse.status));\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}","map":{"version":3,"names":["API_URL","headers","fetchTasks","response","fetch","data","json","map","item","id","text","completed","error","console","Error","handleAddTask","taskText","method","body","JSON","stringify","ok","errorData","concat","message","newTaskData","newTask","attributes","handleDeleteTask","deleteResponse","status","updateTask","updateResponse"],"sources":["/home/academy9/Документы/MobX/src/api.ts"],"sourcesContent":["import { TaskItem } from \"./types\";\n\nconst API_URL = \"http://localhost:1337/api/tasks\";\n\nconst headers = {\n  'Content-Type': 'application/json',\n  // 'Authorization': 'Bearer YOUR_TOKEN' // если нужна авторизация\n};\n\nexport async function fetchTasks(): Promise<TaskItem[]> {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map((item: any) => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed,\n    }));\n  } catch (error: any) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\n\nexport async function handleAddTask(taskText: string): Promise<TaskItem> {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ data: { text: taskText, completed: false } }), // Важно: данные оборачиваются в объект 'data'\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to add task: ${errorData.error.message}`); // Более информативное сообщение об ошибке\n    }\n\n    const newTaskData = await response.json();\n    const newTask: TaskItem = {\n      id: newTaskData.data.id, // Получаем ID из ответа Strapi\n      text: newTaskData.data.attributes.text, // and attributes from Strapi v4/v5\n      completed: newTaskData.data.attributes.completed, // and attributes from Strapi v4/v5\n    };\n    return newTask;\n  } catch (error: any) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\"); // Можно добавить более специфичную обработку ошибок\n  }\n}\n\nexport async function handleDeleteTask(id: number): Promise<void> {\n  try {\n    const deleteResponse = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\",\n      headers,\n    });\n    \n    if (!deleteResponse.ok) {\n      throw new Error(`HTTP error! status: ${deleteResponse.status}`);\n    }\n  } catch (error: any) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\n\nexport async function updateTask(\n  id: number,\n  completed: boolean,\n  text: string\n): Promise<void> {\n  try {\n    const updateResponse = await fetch(`${API_URL}/${id}`, {\n      method: \"PUT\",\n      headers,\n      body: JSON.stringify({\n        data: {\n          text,\n          completed,\n        }\n      }),\n    });\n    \n    if (!updateResponse.ok) {\n      throw new Error(`HTTP error! status: ${updateResponse.status}`);\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}"],"mappings":"AAEA,MAAMA,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,OAAO,GAAG;EACd,cAAc,EAAE;EAChB;AACF,CAAC;AAED,OAAO,eAAeC,UAAUA,CAAA,EAAwB;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,CAAC;IACrC,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,GAAG,CAAEC,IAAS,KAAM;MACnCC,EAAE,EAAED,IAAI,CAACC,EAAE;MACXC,IAAI,EAAEF,IAAI,CAACE,IAAI;MACfC,SAAS,EAAEH,IAAI,CAACG;IAClB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAC;IAC5C,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACF;AAEA,OAAO,eAAeC,aAAaA,CAACC,QAAgB,EAAqB;EACvE,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACJ,OAAO,EAAE;MACpCiB,MAAM,EAAE,MAAM;MACdhB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEf,IAAI,EAAE;UAAEK,IAAI,EAAEM,QAAQ;UAAEL,SAAS,EAAE;QAAM;MAAE,CAAC,CAAC,CAAE;IACxE,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACkB,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMnB,QAAQ,CAACG,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIQ,KAAK,wBAAAS,MAAA,CAAwBD,SAAS,CAACV,KAAK,CAACY,OAAO,CAAE,CAAC,CAAC,CAAC;IACrE;IAEA,MAAMC,WAAW,GAAG,MAAMtB,QAAQ,CAACG,IAAI,CAAC,CAAC;IACzC,MAAMoB,OAAiB,GAAG;MACxBjB,EAAE,EAAEgB,WAAW,CAACpB,IAAI,CAACI,EAAE;MAAE;MACzBC,IAAI,EAAEe,WAAW,CAACpB,IAAI,CAACsB,UAAU,CAACjB,IAAI;MAAE;MACxCC,SAAS,EAAEc,WAAW,CAACpB,IAAI,CAACsB,UAAU,CAAChB,SAAS,CAAE;IACpD,CAAC;IACD,OAAOe,OAAO;EAChB,CAAC,CAAC,OAAOd,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAM,IAAIE,KAAK,CAAC,6CAA6C,CAAC,CAAC,CAAC;EAClE;AACF;AAEA,OAAO,eAAec,gBAAgBA,CAACnB,EAAU,EAAiB;EAChE,IAAI;IACF,MAAMoB,cAAc,GAAG,MAAMzB,KAAK,IAAAmB,MAAA,CAAIvB,OAAO,OAAAuB,MAAA,CAAId,EAAE,GAAI;MACrDQ,MAAM,EAAE,QAAQ;MAChBhB;IACF,CAAC,CAAC;IAEF,IAAI,CAAC4B,cAAc,CAACR,EAAE,EAAE;MACtB,MAAM,IAAIP,KAAK,wBAAAS,MAAA,CAAwBM,cAAc,CAACC,MAAM,CAAE,CAAC;IACjE;EACF,CAAC,CAAC,OAAOlB,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACF;AAEA,OAAO,eAAeiB,UAAUA,CAC9BtB,EAAU,EACVE,SAAkB,EAClBD,IAAY,EACG;EACf,IAAI;IACF,MAAMsB,cAAc,GAAG,MAAM5B,KAAK,IAAAmB,MAAA,CAAIvB,OAAO,OAAAuB,MAAA,CAAId,EAAE,GAAI;MACrDQ,MAAM,EAAE,KAAK;MACbhB,OAAO;MACPiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBf,IAAI,EAAE;UACJK,IAAI;UACJC;QACF;MACF,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACqB,cAAc,CAACX,EAAE,EAAE;MACtB,MAAM,IAAIP,KAAK,wBAAAS,MAAA,CAAwBS,cAAc,CAACF,MAAM,CAAE,CAAC;IACjE;EACF,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}