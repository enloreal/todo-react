{"ast":null,"code":"const API_URL = \"http://localhost:1337/api/tasks\";\nconst headers = {\n  'Content-Type': 'application/json'\n  // 'Authorization': 'Bearer YOUR_TOKEN' // если нужна авторизация\n};\nexport async function fetchTasks() {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map(item => ({\n      id: item.attributes.id,\n      text: item.text,\n      completed: item.completed\n    }));\n  } catch (error) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\nexport async function handleAddTask(taskText) {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        data: {\n          text: taskText,\n          completed: false\n        }\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"HTTP error! status: \".concat(response.status));\n    }\n    const result = await response.json();\n    return {\n      id: result.data.id,\n      text: result.data.attributes.text,\n      completed: result.data.attributes.completed\n    };\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\nexport async function handleDeleteTask(id) {\n  try {\n    const deleteResponse = await fetch(\"\".concat(API_URL, \"/\").concat(id), {\n      method: \"DELETE\",\n      headers\n    });\n    if (!deleteResponse.ok) {\n      throw new Error(\"HTTP error! status: \".concat(deleteResponse.status));\n    }\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\nexport async function updateTask(id, completed, text) {\n  try {\n    const updateResponse = await fetch(\"\".concat(API_URL, \"/\").concat(id), {\n      method: \"PUT\",\n      headers,\n      body: JSON.stringify({\n        data: {\n          text,\n          completed\n        }\n      })\n    });\n    if (!updateResponse.ok) {\n      throw new Error(\"HTTP error! status: \".concat(updateResponse.status));\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}","map":{"version":3,"names":["API_URL","headers","fetchTasks","response","fetch","data","json","map","item","id","attributes","text","completed","error","console","Error","handleAddTask","taskText","method","body","JSON","stringify","ok","concat","status","result","handleDeleteTask","deleteResponse","updateTask","updateResponse"],"sources":["/home/academy9/Документы/MobX/src/api.ts"],"sourcesContent":["import { TaskItem } from \"./types\";\n\nconst API_URL = \"http://localhost:1337/api/tasks\";\n\nconst headers = {\n  'Content-Type': 'application/json',\n  // 'Authorization': 'Bearer YOUR_TOKEN' // если нужна авторизация\n};\n\nexport async function fetchTasks(): Promise<TaskItem[]> {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map((item: any) => ({\n      id: item.attributes.id,\n      text: item.text,\n      completed: item.completed,\n    }));\n  } catch (error: any) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\n\nexport async function handleAddTask(taskText: string): Promise<TaskItem> {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        data: {\n          text: taskText,\n          completed: false,\n        }\n      }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    return {\n      id: result.data.id,\n      text: result.data.attributes.text,\n      completed: result.data.attributes.completed,\n    };\n  } catch (error: any) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\n\nexport async function handleDeleteTask(id: number): Promise<void> {\n  try {\n    const deleteResponse = await fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\",\n      headers,\n    });\n    \n    if (!deleteResponse.ok) {\n      throw new Error(`HTTP error! status: ${deleteResponse.status}`);\n    }\n  } catch (error: any) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\n\nexport async function updateTask(\n  id: number,\n  completed: boolean,\n  text: string\n): Promise<void> {\n  try {\n    const updateResponse = await fetch(`${API_URL}/${id}`, {\n      method: \"PUT\",\n      headers,\n      body: JSON.stringify({\n        data: {\n          text,\n          completed,\n        }\n      }),\n    });\n    \n    if (!updateResponse.ok) {\n      throw new Error(`HTTP error! status: ${updateResponse.status}`);\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}