{"ast":null,"code":"import _objectSpread from \"/home/academy9/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/MobX/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst API_URL = \"http://localhost:1337/api/tasks\";\nexport async function fetchTasks() {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map(item => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed\n    }));\n  } catch (error) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\nexport async function handleAddTask(taskText) {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: taskText,\n        completed: false\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.status));\n    }\n    const newTaskData = await response.json();\n    return {\n      id: newTaskData.id,\n      text: newTaskData.text,\n      completed: newTaskData.completed\n    };\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\nexport async function updateTask(updatedTask) {\n  try {\n    const response = await fetch(\"\".concat(API_URL, \"/\").concat(updatedTask.id), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: updatedTask.text,\n        completed: updatedTask.completed\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.status));\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}\nexport async function deleteTask(taskId) {\n  try {\n    const response = await fetch(\"\".concat(API_URL, \"/\").concat(taskId), {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Network response was not ok: \".concat(response.status));\n    }\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\nexport async function markAllCompleted() {\n  try {\n    const tasks = await fetchTasks();\n    const updatePromises = tasks.map(task => updateTask(_objectSpread(_objectSpread({}, task), {}, {\n      completed: true\n    })));\n    await Promise.all(updatePromises);\n  } catch (error) {\n    console.error(\"Error marking all tasks as completed:\", error);\n    throw new Error(\"Failed to mark all tasks as completed. Please try again later.\");\n  }\n}\nexport async function deleteCompleted() {\n  try {\n    const tasks = await fetchTasks();\n    const deletePromises = tasks.filter(task => task.completed).map(task => deleteTask(task.id));\n    await Promise.all(deletePromises);\n  } catch (error) {\n    console.error(\"Error deleting completed tasks:\", error);\n    throw new Error(\"Failed to delete completed tasks. Please try again later.\");\n  }\n}","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","data","json","map","item","id","text","completed","error","console","Error","handleAddTask","taskText","method","headers","body","JSON","stringify","ok","concat","status","newTaskData","updateTask","updatedTask","deleteTask","taskId","markAllCompleted","tasks","updatePromises","task","_objectSpread","Promise","all","deleteCompleted","deletePromises","filter"],"sources":["/home/academy9/Документы/MobX/src/api.ts"],"sourcesContent":["import { TaskItem } from \"./types\";\n\nconst API_URL = \"http://localhost:1337/api/tasks\";\n\nexport async function fetchTasks(): Promise<TaskItem[]> {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map((item: any) => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed,\n    }));\n  } catch (error: any) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\n\nexport async function handleAddTask(taskText: string): Promise<TaskItem> {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ text: taskText, completed: false }),\n    });\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n    const newTaskData = await response.json();\n    return {\n      id: newTaskData.id,\n      text: newTaskData.text,\n      completed: newTaskData.completed,\n    };\n  } catch (error: any) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\n\nexport async function updateTask(updatedTask: TaskItem): Promise<void> {\n  try {\n    const response = await fetch(`${API_URL}/${updatedTask.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ \n        text: updatedTask.text, \n        completed: updatedTask.completed \n      }),\n    });\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}\n\nexport async function deleteTask(taskId: number): Promise<void> {\n  try {\n    const response = await fetch(`${API_URL}/${taskId}`, {\n      method: \"DELETE\",\n    });\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\n\nexport async function markAllCompleted(): Promise<void> {\n  try {\n    const tasks = await fetchTasks();\n    const updatePromises = tasks.map(task => \n      updateTask({ ...task, completed: true })\n    );\n    await Promise.all(updatePromises);\n  } catch (error) {\n    console.error(\"Error marking all tasks as completed:\", error);\n    throw new Error(\"Failed to mark all tasks as completed. Please try again later.\");\n  }\n}\n\nexport async function deleteCompleted(): Promise<void> {\n  try {\n    const tasks = await fetchTasks();\n    const deletePromises = tasks\n      .filter(task => task.completed)\n      .map(task => deleteTask(task.id));\n    await Promise.all(deletePromises);\n  } catch (error) {\n    console.error(\"Error deleting completed tasks:\", error);\n    throw new Error(\"Failed to delete completed tasks. Please try again later.\");\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}