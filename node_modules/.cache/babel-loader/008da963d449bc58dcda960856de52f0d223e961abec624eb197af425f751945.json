{"ast":null,"code":"import _objectSpread from \"/home/academy9/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/MobX/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { makeAutoObservable } from \"mobx\";\nimport { fetchTasks as apiFetchTasks } from \"../api\";\nclass TodoStore {\n  constructor() {\n    this.tasks = [];\n    this.newTaskText = \"\";\n    this.editingTask = null;\n    this.message = \"\";\n    makeAutoObservable(this);\n  }\n  async fetchInitialTasks() {\n    try {\n      const fetchedTasks = await apiFetchTasks();\n      this.tasks = fetchedTasks;\n      this.message = \"❗Tasks loaded from server❗\";\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      this.message = \"❗Error loading tasks❗\";\n      this.tasks = [];\n    }\n  }\n  async addTask() {\n    if (!this.newTaskText.trim()) return;\n    const newTask = {\n      id: Date.now(),\n      // это тоже нужно будет изменить, ID будет присваивать Strapi\n      text: this.newTaskText,\n      completed: false\n    };\n\n    // Здесь будет API-вызов к Strapi для создания задачи\n    this.tasks.push(newTask);\n    this.newTaskText = \"\";\n  }\n  async deleteTask(id) {\n    // Здесь будет API-вызов к Strapi для удаления задачи\n    this.tasks = this.tasks.filter(task => task.id !== id);\n  }\n  async toggleTask(id) {\n    const taskIndex = this.tasks.findIndex(task => task.id === id);\n    if (taskIndex !== -1) {\n      // Здесь будет API-вызов к Strapi для обновления статуса задачи\n      this.tasks[taskIndex].completed = !this.tasks[taskIndex].completed;\n    }\n  }\n  async markAllCompleted() {\n    // Здесь будет API-вызов к Strapi для обновления всех задач\n    this.tasks = this.tasks.map(task => _objectSpread(_objectSpread({}, task), {}, {\n      completed: true\n    }));\n  }\n  async deleteCompleted() {\n    // Здесь будет API-вызов к Strapi для удаления выполненных задач\n    this.tasks = this.tasks.filter(task => !task.completed);\n  }\n  startEditingTask(task) {\n    this.editingTask = task;\n  }\n  cancelEditingTask() {\n    this.editingTask = null;\n  }\n  async updateTask(updatedTask) {\n    if (updatedTask.text.trim() === \"\") return;\n    const taskIndex = this.tasks.findIndex(task => task.id === updatedTask.id);\n    if (taskIndex !== -1) {\n      // Здесь будет API-вызов к Strapi для обновления задачи\n      this.tasks[taskIndex] = updatedTask;\n    }\n    this.editingTask = null;\n  }\n  setNewTaskText(text) {\n    this.newTaskText = text;\n  }\n}\nexport default new TodoStore();","map":{"version":3,"names":["makeAutoObservable","fetchTasks","apiFetchTasks","TodoStore","constructor","tasks","newTaskText","editingTask","message","fetchInitialTasks","fetchedTasks","error","console","addTask","trim","newTask","id","Date","now","text","completed","push","deleteTask","filter","task","toggleTask","taskIndex","findIndex","markAllCompleted","map","_objectSpread","deleteCompleted","startEditingTask","cancelEditingTask","updateTask","updatedTask","setNewTaskText"],"sources":["/home/academy9/Документы/MobX/src/store/todoStore.ts"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { TaskItem } from \"../types\";\nimport { fetchTasks as apiFetchTasks } from \"../api\";\n\nclass TodoStore {\n    tasks: TaskItem[] = [];\n    newTaskText: string = \"\";\n    editingTask: TaskItem | null = null;\n    message: string = \"\";\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    async fetchInitialTasks() {\n        try {\n            const fetchedTasks = await apiFetchTasks();\n            this.tasks = fetchedTasks;\n            this.message = \"❗Tasks loaded from server❗\";\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n            this.message = \"❗Error loading tasks❗\";\n            this.tasks = [];\n        }\n    }\n\n    async addTask() {\n        if (!this.newTaskText.trim()) return;\n\n        const newTask: TaskItem = {\n            id: Date.now(), // это тоже нужно будет изменить, ID будет присваивать Strapi\n            text: this.newTaskText,\n            completed: false,\n        };\n\n        // Здесь будет API-вызов к Strapi для создания задачи\n        this.tasks.push(newTask);\n        this.newTaskText = \"\";\n    }\n\n    async deleteTask(id: number) {\n        // Здесь будет API-вызов к Strapi для удаления задачи\n        this.tasks = this.tasks.filter((task) => task.id !== id);\n    }\n\n    async toggleTask(id: number) {\n        const taskIndex = this.tasks.findIndex((task) => task.id === id);\n        if (taskIndex !== -1) {\n            // Здесь будет API-вызов к Strapi для обновления статуса задачи\n            this.tasks[taskIndex].completed = !this.tasks[taskIndex].completed;\n        }\n    }\n\n    async markAllCompleted() {\n        // Здесь будет API-вызов к Strapi для обновления всех задач\n        this.tasks = this.tasks.map((task) => ({ ...task, completed: true }));\n    }\n\n    async deleteCompleted() {\n        // Здесь будет API-вызов к Strapi для удаления выполненных задач\n        this.tasks = this.tasks.filter((task) => !task.completed);\n    }\n\n    startEditingTask(task: TaskItem) {\n        this.editingTask = task;\n    }\n\n    cancelEditingTask() {\n        this.editingTask = null;\n    }\n\n    async updateTask(updatedTask: TaskItem) {\n        if (updatedTask.text.trim() === \"\") return;\n\n        const taskIndex = this.tasks.findIndex((task) => task.id === updatedTask.id);\n        if (taskIndex !== -1) {\n            // Здесь будет API-вызов к Strapi для обновления задачи\n            this.tasks[taskIndex] = updatedTask;\n        }\n\n        this.editingTask = null;\n    }\n\n    setNewTaskText(text: string) {\n        this.newTaskText = text;\n    }\n}\n\nexport default new TodoStore();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}