{"ast":null,"code":"const API_URL = \"https://jsonplaceholder.typicode.com/todos\";\nexport async function fetchTasks() {\n  const response = await fetch(API_URL);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch tasks\");\n  }\n  const data = await response.json();\n  return data.map(item => ({\n    id: item.id,\n    text: item.title,\n    completed: item.completed\n  }));\n}\nexport async function handleAddTask(taskText) {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: taskText,\n      completed: false,\n      userId: 1\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to add task\");\n  }\n  return {\n    id: Date.now(),\n    text: taskText,\n    completed: false\n  };\n}\nexport async function handleDeleteTask(id) {\n  const response = await fetch(\"\".concat(API_URL, \"/\").concat(id), {\n    method: \"DELETE\"\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to delete task\");\n  }\n}\nexport async function updateTask(id, completed, text) {\n  const response = await fetch(\"\".concat(API_URL, \"/\").concat(id), {\n    method: \"PUT\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: id,\n      title: text,\n      completed: completed,\n      userId: 1\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update task\");\n  }\n}\n\n/*\n    updateTaskInStore(updatedTask: TaskItem) {\n        if (updatedTask.text.trim() === \"\") return;\n      \n        const taskIndex = this.tasks.findIndex((task) => task.documentId === updatedTask.documentId);\n        if (taskIndex !== -1) {\n          updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n            this.tasks[taskIndex] = updatedTask;\n            saveTasksToLocalStorage(this.tasks);\n          });\n        }\n      \n        this.editingTask = null;\n      }\n        */","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","ok","Error","data","json","map","item","id","text","title","completed","handleAddTask","taskText","method","headers","body","JSON","stringify","userId","Date","now","handleDeleteTask","concat","updateTask"],"sources":["/home/academy9/Документы/MobX/src/store/todoStore.ts"],"sourcesContent":["import { TaskItem } from \"./types\";\n\nconst API_URL = \"https://jsonplaceholder.typicode.com/todos\";\n\nexport async function fetchTasks(): Promise<TaskItem[]> {\n  const response = await fetch(API_URL);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch tasks\");\n  }\n  const data = await response.json();\n  return data.map((item: any) => ({\n    id: item.id,\n    text: item.title,\n    completed: item.completed,\n  }));\n}\n\nexport async function handleAddTask(taskText: string): Promise<TaskItem> {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: taskText,\n      completed: false,\n      userId: 1,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to add task\");\n  }\n  return {\n    id: Date.now(),\n    text: taskText,\n    completed: false,\n  };\n}\n\nexport async function handleDeleteTask(id: number): Promise<void> {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: \"DELETE\",\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to delete task\");\n  }\n}\n\nexport async function updateTask(\n  id: number,\n  completed: boolean,\n  text: string\n): Promise<void> {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: id,\n      title: text,\n      completed: completed,\n      userId: 1,\n    }),\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to update task\");\n  }\n}\n\n\n/*\n    updateTaskInStore(updatedTask: TaskItem) {\n        if (updatedTask.text.trim() === \"\") return;\n      \n        const taskIndex = this.tasks.findIndex((task) => task.documentId === updatedTask.documentId);\n        if (taskIndex !== -1) {\n          updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n            this.tasks[taskIndex] = updatedTask;\n            saveTasksToLocalStorage(this.tasks);\n          });\n        }\n      \n        this.editingTask = null;\n      }\n        */"],"mappings":"AAEA,MAAMA,OAAO,GAAG,4CAA4C;AAE5D,OAAO,eAAeC,UAAUA,CAAA,EAAwB;EACtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,CAAC;EACrC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,GAAG,CAAEC,IAAS,KAAM;IAC9BC,EAAE,EAAED,IAAI,CAACC,EAAE;IACXC,IAAI,EAAEF,IAAI,CAACG,KAAK;IAChBC,SAAS,EAAEJ,IAAI,CAACI;EAClB,CAAC,CAAC,CAAC;AACL;AAEA,OAAO,eAAeC,aAAaA,CAACC,QAAgB,EAAqB;EACvE,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,EAAE;IACpCgB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBR,KAAK,EAAEG,QAAQ;MACfF,SAAS,EAAE,KAAK;MAChBQ,MAAM,EAAE;IACV,CAAC;EACH,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EACvC;EACA,OAAO;IACLK,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC;IACdZ,IAAI,EAAEI,QAAQ;IACdF,SAAS,EAAE;EACb,CAAC;AACH;AAEA,OAAO,eAAeW,gBAAgBA,CAACd,EAAU,EAAiB;EAChE,MAAMR,QAAQ,GAAG,MAAMC,KAAK,IAAAsB,MAAA,CAAIzB,OAAO,OAAAyB,MAAA,CAAIf,EAAE,GAAI;IAC/CM,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;AACF;AAEA,OAAO,eAAeqB,UAAUA,CAC9BhB,EAAU,EACVG,SAAkB,EAClBF,IAAY,EACG;EACf,MAAMT,QAAQ,GAAG,MAAMC,KAAK,IAAAsB,MAAA,CAAIzB,OAAO,OAAAyB,MAAA,CAAIf,EAAE,GAAI;IAC/CM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBV,EAAE,EAAEA,EAAE;MACNE,KAAK,EAAED,IAAI;MACXE,SAAS,EAAEA,SAAS;MACpBQ,MAAM,EAAE;IACV,CAAC;EACH,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;AACF;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}