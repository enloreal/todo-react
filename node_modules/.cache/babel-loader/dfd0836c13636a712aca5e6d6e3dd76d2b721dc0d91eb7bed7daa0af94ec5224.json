{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/academy9/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/MobX/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nvar _templateObject, _templateObject2;\n\"\"(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"typescript\\nimport { makeAutoObservable } from \\\"mobx\\\";\\nimport { TaskItem } from \\\"../types\\\";\\nimport { fetchTasks, handleAddTask, handleDeleteTask, updateTask as apiUpdateTask } from \\\"../api\\\";\\n\\nclass TodoStore {\\n    tasks: TaskItem[] = [];\\n    newTaskText: string = \\\"\\\";\\n    editingTask: TaskItem | null = null;\\n    message: string = \\\"\\\";\\n\\n    constructor() {\\n        makeAutoObservable(this);\\n    }\\n\\n    async fetchInitialTasks() {\\n        try {\\n            const fetchedTasks = await fetchTasks();\\n            this.tasks = fetchedTasks;\\n            this.message = \\\"\\u2757Tasks loaded from server\\u2757\\\";\\n        } catch (error) {\\n            console.error(\\\"Error fetching tasks:\\\", error);\\n            this.message = \\\"\\u2757Error loading tasks\\u2757\\\";\\n        }\\n    }\\n\\n    addTask = async () => {\\n        if (!this.newTaskText.trim()) return;\\n\\n        try {\\n            const newTask = await handleAddTask(this.newTaskText);\\n            this.tasks.push(newTask);\\n            this.newTaskText = \\\"\\\";\\n        } catch (error) {\\n            this.message = \\\"Failed to add task. Please try again later.\\\";\\n            console.error(error);\\n        }\\n    };\\n\\n    deleteTask = async (id: number) => {\\n        try {\\n            await handleDeleteTask(id);\\n            this.tasks = this.tasks.filter((task) => task.id !== id);\\n        } catch (error) {\\n            this.message = \\\"Failed to delete task. Please try again later.\\\";\\n            console.error(error);\\n        }\\n    };\\n\\n    toggleTask = async (id: number) => {\\n        try {\\n            const taskIndex = this.tasks.findIndex((task) => task.id === id);\\n            if (taskIndex === -1) {\\n                return;\\n            }\\n            const updatedTask = { ...this.tasks[taskIndex], completed: !this.tasks[taskIndex].completed };\\n            await apiUpdateTask(id, updatedTask);\\n            this.tasks[taskIndex] = updatedTask;\\n        } catch (error) {\\n            this.message = \\\"Failed to toggle task. Please try again later.\\\";\\n            console.error(error);\\n        }\\n    };\\n\\n    markAllCompleted = async () => {\\n        try {\\n            for (const task of this.tasks) {\\n                if (!task.completed) {\\n                    const updatedTask = { ...task, completed: true };\\n                    await apiUpdateTask(task.id, updatedTask);\\n                }\\n            }\\n\\n            this.tasks = this.tasks.map((task) => ({ ...task, completed: true }));\\n        } catch (error) {\\n            this.message = \\\"Failed to mark all tasks as completed. Please try again later.\\\";\\n            console.error(error);\\n        }\\n    };\\n\\n    deleteCompleted = async () => {\\n        try {\\n            const completedTasksIds = this.tasks.filter(task => task.completed).map(task => task.id);\\n            for (const taskId of completedTasksIds) {\\n                await handleDeleteTask(taskId);\\n            }\\n\\n            this.tasks = this.tasks.filter((task) => !task.completed);\\n        } catch (error) {\\n            this.message = \\\"Failed to delete completed tasks. Please try again later.\\\";\\n            console.error(error);\\n        }\\n    };\\n\\n    startEditingTask(task: TaskItem) {\\n        this.editingTask = task;\\n    }\\n\\n    cancelEditingTask() {\\n        this.editingTask = null;\\n    }\\n\\n    updateTask = async (updatedTask: TaskItem) => {\\n        if (updatedTask.text.trim() === \\\"\\\") return;\\n\\n        try {\\n            await apiUpdateTask(updatedTask.id, updatedTask);\\n\\n            const taskIndex = this.tasks.findIndex((task) => task.id === updatedTask.id);\\n            if (taskIndex !== -1) {\\n                this.tasks[taskIndex] = updatedTask;\\n            }\\n            this.editingTask = null;\\n        } catch (error) {\\n            this.message = \\\"Failed to update task. Please try again later.\\\";\\n            console.error(error);\\n        }\\n    };\\n\\n    setNewTaskText(text: string) {\\n        this.newTaskText = text;\\n    }\\n}\\n\\nexport default new TodoStore();\\n\"])))(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\"])));","map":{"version":3,"names":["_templateObject2","_taggedTemplateLiteral","_templateObject"],"sources":["/home/academy9/Документы/MobX/src/store/todoStore.ts"],"sourcesContent":["```typescript\nimport { makeAutoObservable } from \"mobx\";\nimport { TaskItem } from \"../types\";\nimport { fetchTasks, handleAddTask, handleDeleteTask, updateTask as apiUpdateTask } from \"../api\";\n\nclass TodoStore {\n    tasks: TaskItem[] = [];\n    newTaskText: string = \"\";\n    editingTask: TaskItem | null = null;\n    message: string = \"\";\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    async fetchInitialTasks() {\n        try {\n            const fetchedTasks = await fetchTasks();\n            this.tasks = fetchedTasks;\n            this.message = \"❗Tasks loaded from server❗\";\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n            this.message = \"❗Error loading tasks❗\";\n        }\n    }\n\n    addTask = async () => {\n        if (!this.newTaskText.trim()) return;\n\n        try {\n            const newTask = await handleAddTask(this.newTaskText);\n            this.tasks.push(newTask);\n            this.newTaskText = \"\";\n        } catch (error) {\n            this.message = \"Failed to add task. Please try again later.\";\n            console.error(error);\n        }\n    };\n\n    deleteTask = async (id: number) => {\n        try {\n            await handleDeleteTask(id);\n            this.tasks = this.tasks.filter((task) => task.id !== id);\n        } catch (error) {\n            this.message = \"Failed to delete task. Please try again later.\";\n            console.error(error);\n        }\n    };\n\n    toggleTask = async (id: number) => {\n        try {\n            const taskIndex = this.tasks.findIndex((task) => task.id === id);\n            if (taskIndex === -1) {\n                return;\n            }\n            const updatedTask = { ...this.tasks[taskIndex], completed: !this.tasks[taskIndex].completed };\n            await apiUpdateTask(id, updatedTask);\n            this.tasks[taskIndex] = updatedTask;\n        } catch (error) {\n            this.message = \"Failed to toggle task. Please try again later.\";\n            console.error(error);\n        }\n    };\n\n    markAllCompleted = async () => {\n        try {\n            for (const task of this.tasks) {\n                if (!task.completed) {\n                    const updatedTask = { ...task, completed: true };\n                    await apiUpdateTask(task.id, updatedTask);\n                }\n            }\n\n            this.tasks = this.tasks.map((task) => ({ ...task, completed: true }));\n        } catch (error) {\n            this.message = \"Failed to mark all tasks as completed. Please try again later.\";\n            console.error(error);\n        }\n    };\n\n    deleteCompleted = async () => {\n        try {\n            const completedTasksIds = this.tasks.filter(task => task.completed).map(task => task.id);\n            for (const taskId of completedTasksIds) {\n                await handleDeleteTask(taskId);\n            }\n\n            this.tasks = this.tasks.filter((task) => !task.completed);\n        } catch (error) {\n            this.message = \"Failed to delete completed tasks. Please try again later.\";\n            console.error(error);\n        }\n    };\n\n    startEditingTask(task: TaskItem) {\n        this.editingTask = task;\n    }\n\n    cancelEditingTask() {\n        this.editingTask = null;\n    }\n\n    updateTask = async (updatedTask: TaskItem) => {\n        if (updatedTask.text.trim() === \"\") return;\n\n        try {\n            await apiUpdateTask(updatedTask.id, updatedTask);\n\n            const taskIndex = this.tasks.findIndex((task) => task.id === updatedTask.id);\n            if (taskIndex !== -1) {\n                this.tasks[taskIndex] = updatedTask;\n            }\n            this.editingTask = null;\n        } catch (error) {\n            this.message = \"Failed to update task. Please try again later.\";\n            console.error(error);\n        }\n    };\n\n    setNewTaskText(text: string) {\n        this.newTaskText = text;\n    }\n}\n\nexport default new TodoStore();\n```"],"mappings":";;AAAA,GAAAA,gBAAA,KAAAA,gBAAA,GAAAC,sBAAA,k/HAAAC,eAAA,KAAAA,eAAA,GAAAD,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}