{"ast":null,"code":"import _objectSpread from \"/home/academy9/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/MobX/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { makeAutoObservable } from \"mobx\";\nimport { fetchTasks as apiFetchTasks, handleAddTask, handleDeleteTask, updateTask } from \"../api\";\nclass TodoStore {\n  constructor() {\n    this.tasks = [];\n    this.newTaskText = \"\";\n    this.editingTask = null;\n    this.message = \"\";\n    makeAutoObservable(this);\n  }\n  async fetchInitialTasks() {\n    try {\n      const fetchedTasks = await apiFetchTasks();\n      this.tasks = fetchedTasks;\n      this.message = \"\";\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      this.message = \"❗Error loading tasks.\";\n    }\n    ;\n  }\n  async addTask() {\n    if (!this.newTaskText.trim()) return;\n    try {\n      const newTask = await handleAddTask(this.newTaskText);\n      this.tasks.push(newTask);\n      this.newTaskText = \"\";\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n      this.message = \"❗Error adding task.\";\n    }\n  }\n  async deleteTask(id) {\n    try {\n      await handleDeleteTask(id);\n      this.tasks = this.tasks.filter(task => task.id !== id);\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      this.message = \"❗Error deleting task.\";\n    }\n  }\n  async toggleTask(id) {\n    const taskIndex = this.tasks.findIndex(task => task.id === id);\n    if (taskIndex !== -1) {\n      const updatedTask = _objectSpread(_objectSpread({}, this.tasks[taskIndex]), {}, {\n        completed: !this.tasks[taskIndex].completed\n      });\n      try {\n        await updateTask(id, updatedTask.completed, updatedTask.text);\n        this.tasks[taskIndex] = updatedTask;\n      } catch (error) {\n        console.error(\"Error updating task:\", error);\n        this.message = \"❗Error updating task.\";\n      }\n    }\n  }\n  markAllCompleted() {\n    this.tasks = this.tasks.map(task => _objectSpread(_objectSpread({}, task), {}, {\n      completed: true\n    }));\n  }\n  deleteCompleted() {\n    this.tasks = this.tasks.filter(task => !task.completed);\n  }\n  startEditingTask(task) {\n    this.editingTask = task;\n  }\n  cancelEditingTask() {\n    this.editingTask = null;\n  }\n  updateTaskInStore(updatedTask) {\n    if (updatedTask.text.trim() === \"\") return;\n    const taskIndex = this.tasks.findIndex(task => task.documentId === updatedTask.documentId);\n    if (taskIndex !== -1) {\n      updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n        this.tasks[taskIndex] = updatedTask;\n      });\n    }\n    this.editingTask = null;\n  }\n  setNewTaskText(text) {\n    this.newTaskText = text;\n  }\n}\nexport default new TodoStore();\n\n/*\n    updateTaskInStore(updatedTask: TaskItem) {\n        if (updatedTask.text.trim() === \"\") return;\n      \n        const taskIndex = this.tasks.findIndex((task) => task.documentId === updatedTask.documentId);\n        if (taskIndex !== -1) {\n          updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n            this.tasks[taskIndex] = updatedTask;\n            saveTasksToLocalStorage(this.tasks);\n          });\n        }\n      \n        this.editingTask = null;\n      }\n        */","map":{"version":3,"names":["makeAutoObservable","fetchTasks","apiFetchTasks","handleAddTask","handleDeleteTask","updateTask","TodoStore","constructor","tasks","newTaskText","editingTask","message","fetchInitialTasks","fetchedTasks","error","console","addTask","trim","newTask","push","deleteTask","id","filter","task","toggleTask","taskIndex","findIndex","updatedTask","_objectSpread","completed","text","markAllCompleted","map","deleteCompleted","startEditingTask","cancelEditingTask","updateTaskInStore","documentId","then","setNewTaskText"],"sources":["/home/academy9/Документы/MobX/src/store/todoStore.ts"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { TaskItem } from \"../types\";\nimport { fetchTasks as apiFetchTasks, handleAddTask, handleDeleteTask, updateTask } from \"../api\";\n\nclass TodoStore {\n  tasks: TaskItem[] = [];\n  newTaskText: string = \"\";\n  editingTask: TaskItem | null = null;\n  message: string = \"\";\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  async fetchInitialTasks() {\n    try {\n      const fetchedTasks = await apiFetchTasks();\n      this.tasks = fetchedTasks;\n      this.message = \"\";\n    } catch (error: any) {\n      console.error(\"Error fetching tasks:\", error);\n      this.message = \"❗Error loading tasks.\";\n    };\n  }\n\n  async addTask() {\n    if (!this.newTaskText.trim()) return;\n\n    try {\n      const newTask = await handleAddTask(this.newTaskText);\n      this.tasks.push(newTask);\n      this.newTaskText = \"\";\n    } catch (error: any) {\n      console.error(\"Error adding task:\", error);\n      this.message = \"❗Error adding task.\";\n    }\n  }\n\n  async deleteTask(id: any) {\n    try {\n      await handleDeleteTask(id);\n      this.tasks = this.tasks.filter((task) => task.id !== id);\n    } catch (error: any) {\n      console.error(\"Error deleting task:\", error);\n      this.message = \"❗Error deleting task.\";\n    }\n  }\n\n  async toggleTask(id: number) {\n    const taskIndex = this.tasks.findIndex((task) => task.id === id);\n    if (taskIndex !== -1) {\n      const updatedTask = { ...this.tasks[taskIndex], completed: !this.tasks[taskIndex].completed };\n      try {\n        await updateTask(id, updatedTask.completed, updatedTask.text);\n        this.tasks[taskIndex] = updatedTask;\n      } catch (error: any) {\n        console.error(\"Error updating task:\", error);\n        this.message = \"❗Error updating task.\";\n      }\n    }\n  }\n\n  markAllCompleted() {\n    this.tasks = this.tasks.map((task) => ({ ...task, completed: true }));\n  }\n\n  deleteCompleted() {\n    this.tasks = this.tasks.filter((task) => !task.completed);\n  }\n\n  startEditingTask(task: TaskItem) {\n    this.editingTask = task;\n  }\n\n  cancelEditingTask() {\n    this.editingTask = null;\n  }\n\n  updateTaskInStore(updatedTask: TaskItem) {\n    if (updatedTask.text.trim() === \"\") return;\n  \n    const taskIndex = this.tasks.findIndex((task) => task.documentId === updatedTask.documentId);\n    if (taskIndex !== -1) {\n      updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n        this.tasks[taskIndex] = updatedTask;\n      });\n    }\n  \n    this.editingTask = null;\n  }\n\n  setNewTaskText(text: string) {\n    this.newTaskText = text;\n  }\n}\n\nexport default new TodoStore();\n\n\n/*\n    updateTaskInStore(updatedTask: TaskItem) {\n        if (updatedTask.text.trim() === \"\") return;\n      \n        const taskIndex = this.tasks.findIndex((task) => task.documentId === updatedTask.documentId);\n        if (taskIndex !== -1) {\n          updateTask(updatedTask.documentId, updatedTask.completed, updatedTask.text).then(() => {\n            this.tasks[taskIndex] = updatedTask;\n            saveTasksToLocalStorage(this.tasks);\n          });\n        }\n      \n        this.editingTask = null;\n      }\n        */"],"mappings":";AAAA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC,SAASC,UAAU,IAAIC,aAAa,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,QAAQ;AAEjG,MAAMC,SAAS,CAAC;EAMdC,WAAWA,CAAA,EAAG;IAAA,KALdC,KAAK,GAAe,EAAE;IAAA,KACtBC,WAAW,GAAW,EAAE;IAAA,KACxBC,WAAW,GAAoB,IAAI;IAAA,KACnCC,OAAO,GAAW,EAAE;IAGlBX,kBAAkB,CAAC,IAAI,CAAC;EAC1B;EAEA,MAAMY,iBAAiBA,CAAA,EAAG;IACxB,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMX,aAAa,CAAC,CAAC;MAC1C,IAAI,CAACM,KAAK,GAAGK,YAAY;MACzB,IAAI,CAACF,OAAO,GAAG,EAAE;IACnB,CAAC,CAAC,OAAOG,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAI,CAACH,OAAO,GAAG,uBAAuB;IACxC;IAAC;EACH;EAEA,MAAMK,OAAOA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAACP,WAAW,CAACQ,IAAI,CAAC,CAAC,EAAE;IAE9B,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMf,aAAa,CAAC,IAAI,CAACM,WAAW,CAAC;MACrD,IAAI,CAACD,KAAK,CAACW,IAAI,CAACD,OAAO,CAAC;MACxB,IAAI,CAACT,WAAW,GAAG,EAAE;IACvB,CAAC,CAAC,OAAOK,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,IAAI,CAACH,OAAO,GAAG,qBAAqB;IACtC;EACF;EAEA,MAAMS,UAAUA,CAACC,EAAO,EAAE;IACxB,IAAI;MACF,MAAMjB,gBAAgB,CAACiB,EAAE,CAAC;MAC1B,IAAI,CAACb,KAAK,GAAG,IAAI,CAACA,KAAK,CAACc,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC1D,CAAC,CAAC,OAAOP,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,IAAI,CAACH,OAAO,GAAG,uBAAuB;IACxC;EACF;EAEA,MAAMa,UAAUA,CAACH,EAAU,EAAE;IAC3B,MAAMI,SAAS,GAAG,IAAI,CAACjB,KAAK,CAACkB,SAAS,CAAEH,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;IAChE,IAAII,SAAS,KAAK,CAAC,CAAC,EAAE;MACpB,MAAME,WAAW,GAAAC,aAAA,CAAAA,aAAA,KAAQ,IAAI,CAACpB,KAAK,CAACiB,SAAS,CAAC;QAAEI,SAAS,EAAE,CAAC,IAAI,CAACrB,KAAK,CAACiB,SAAS,CAAC,CAACI;MAAS,EAAE;MAC7F,IAAI;QACF,MAAMxB,UAAU,CAACgB,EAAE,EAAEM,WAAW,CAACE,SAAS,EAAEF,WAAW,CAACG,IAAI,CAAC;QAC7D,IAAI,CAACtB,KAAK,CAACiB,SAAS,CAAC,GAAGE,WAAW;MACrC,CAAC,CAAC,OAAOb,KAAU,EAAE;QACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,IAAI,CAACH,OAAO,GAAG,uBAAuB;MACxC;IACF;EACF;EAEAoB,gBAAgBA,CAAA,EAAG;IACjB,IAAI,CAACvB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACwB,GAAG,CAAET,IAAI,IAAAK,aAAA,CAAAA,aAAA,KAAWL,IAAI;MAAEM,SAAS,EAAE;IAAI,EAAG,CAAC;EACvE;EAEAI,eAAeA,CAAA,EAAG;IAChB,IAAI,CAACzB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACc,MAAM,CAAEC,IAAI,IAAK,CAACA,IAAI,CAACM,SAAS,CAAC;EAC3D;EAEAK,gBAAgBA,CAACX,IAAc,EAAE;IAC/B,IAAI,CAACb,WAAW,GAAGa,IAAI;EACzB;EAEAY,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACzB,WAAW,GAAG,IAAI;EACzB;EAEA0B,iBAAiBA,CAACT,WAAqB,EAAE;IACvC,IAAIA,WAAW,CAACG,IAAI,CAACb,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAEpC,MAAMQ,SAAS,GAAG,IAAI,CAACjB,KAAK,CAACkB,SAAS,CAAEH,IAAI,IAAKA,IAAI,CAACc,UAAU,KAAKV,WAAW,CAACU,UAAU,CAAC;IAC5F,IAAIZ,SAAS,KAAK,CAAC,CAAC,EAAE;MACpBpB,UAAU,CAACsB,WAAW,CAACU,UAAU,EAAEV,WAAW,CAACE,SAAS,EAAEF,WAAW,CAACG,IAAI,CAAC,CAACQ,IAAI,CAAC,MAAM;QACrF,IAAI,CAAC9B,KAAK,CAACiB,SAAS,CAAC,GAAGE,WAAW;MACrC,CAAC,CAAC;IACJ;IAEA,IAAI,CAACjB,WAAW,GAAG,IAAI;EACzB;EAEA6B,cAAcA,CAACT,IAAY,EAAE;IAC3B,IAAI,CAACrB,WAAW,GAAGqB,IAAI;EACzB;AACF;AAEA,eAAe,IAAIxB,SAAS,CAAC,CAAC;;AAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}