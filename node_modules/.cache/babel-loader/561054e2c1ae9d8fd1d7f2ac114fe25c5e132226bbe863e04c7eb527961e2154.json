{"ast":null,"code":"const API_URL = \"http://localhost:1337/api/tasks\";\nexport async function fetchTasks() {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map(item => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed\n    }));\n  } catch (error) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\nexport async function handleAddTask(taskText) {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        data: {\n          text: taskText,\n          completed: false,\n          documentId: Date.now().toString() // или можно использовать uuid\n        }\n      })\n    });\n    const result = await response.json();\n    return {\n      id: result.data.documentId,\n      text: result.data.text,\n      completed: result.data.completed\n    };\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\nexport async function handleDeleteTask(id) {\n  try {\n    var _result$data$;\n    // В Strapi нужно найти задачу по documentId\n    const response = await fetch(\"\".concat(API_URL, \"?filters[documentId][$eq]=\").concat(id));\n    const result = await response.json();\n    const strapiId = (_result$data$ = result.data[0]) === null || _result$data$ === void 0 ? void 0 : _result$data$.id;\n    if (strapiId) {\n      await fetch(\"\".concat(API_URL, \"/\").concat(strapiId), {\n        method: \"DELETE\"\n      });\n    }\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\nexport async function updateTask(id, completed, text) {\n  try {\n    var _result$data$2;\n    // Сначала найдем задачу по documentId\n    const response = await fetch(\"\".concat(API_URL, \"?filters[documentId][$eq]=\").concat(id));\n    const result = await response.json();\n    const strapiId = (_result$data$2 = result.data[0]) === null || _result$data$2 === void 0 ? void 0 : _result$data$2.id;\n    if (strapiId) {\n      await fetch(\"\".concat(API_URL, \"/\").concat(strapiId), {\n        method: \"PUT\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          data: {\n            text,\n            completed\n          }\n        })\n      });\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}","map":{"version":3,"names":["API_URL","fetchTasks","response","fetch","data","json","map","item","id","text","completed","error","console","Error","handleAddTask","taskText","method","headers","body","JSON","stringify","documentId","Date","now","toString","result","handleDeleteTask","_result$data$","concat","strapiId","updateTask","_result$data$2"],"sources":["/home/academy9/Документы/MobX/src/api.ts"],"sourcesContent":["import { TaskItem } from \"./types\";\n\nconst API_URL = \"http://localhost:1337/api/tasks\";\n\nexport async function fetchTasks(): Promise<TaskItem[]> {\n  try {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    return data.data.map((item: any) => ({\n      id: item.id,\n      text: item.text,\n      completed: item.completed,\n    }));\n  } catch (error: any) {\n    console.error(\"Error while fetching tasks:\");\n    throw new Error(\"Failed to fetch tasks. Please try again later.\");\n  }\n}\n\nexport async function handleAddTask(taskText: string): Promise<TaskItem> {\n  try {\n    const response = await fetch(API_URL, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        data: {\n          text: taskText,\n          completed: false,\n          documentId: Date.now().toString(), // или можно использовать uuid\n        }\n      }),\n    });\n    const result = await response.json();\n    return {\n      id: result.data.documentId,\n      text: result.data.text,\n      completed: result.data.completed,\n    };\n  } catch (error: any) {\n    console.error(\"Error adding task:\", error);\n    throw new Error(\"Failed to add task. Please try again later.\");\n  }\n}\n\nexport async function handleDeleteTask(id: string): Promise<void> {\n  try {\n    // В Strapi нужно найти задачу по documentId\n    const response = await fetch(`${API_URL}?filters[documentId][$eq]=${id}`);\n    const result = await response.json();\n    const strapiId = result.data[0]?.id;\n    \n    if (strapiId) {\n      await fetch(`${API_URL}/${strapiId}`, {\n        method: \"DELETE\",\n      });\n    }\n  } catch (error: any) {\n    console.error(\"Error deleting task:\", error);\n    throw new Error(\"Failed to delete task. Please try again later.\");\n  }\n}\n\nexport async function updateTask(\n  id: string,\n  completed: boolean,\n  text: string\n): Promise<void> {\n  try {\n    // Сначала найдем задачу по documentId\n    const response = await fetch(`${API_URL}?filters[documentId][$eq]=${id}`);\n    const result = await response.json();\n    const strapiId = result.data[0]?.id;\n\n    if (strapiId) {\n      await fetch(`${API_URL}/${strapiId}`, {\n        method: \"PUT\",\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          data: {\n            text,\n            completed,\n          }\n        }),\n      });\n    }\n  } catch (error) {\n    console.error(\"Error updating task:\", error);\n    throw new Error(\"Failed to update task. Please try again later.\");\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}